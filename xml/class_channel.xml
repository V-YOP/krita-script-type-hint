<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="class_channel" kind="class" language="C++" prot="public">
    <compoundname>Channel</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="_channel_8h" local="no">Channel.h</includes>
    <innerclass refid="struct_channel_1_1_private" prot="public">Channel::Private</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_channel_1aefa84b18623f8df4071e19d33c02d02b" prot="private" static="no" mutable="no">
        <type><ref refid="struct_channel_1_1_private" kindref="compound">Private</ref> *const</type>
        <definition>Private* const Channel::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>Channel::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="87" column="19" bodyfile="Channel.h" bodystart="87" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_channel_1a54353e4d5c8d68707527f2b52704d2f7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Channel::Channel</definition>
        <argsstring>(KisNodeSP node, KoChannelInfo *channel, QObject *parent=0)</argsstring>
        <name>Channel</name>
        <qualifiedname>Channel::Channel</qualifiedname>
        <param>
          <type>KisNodeSP</type>
          <declname>node</declname>
        </param>
        <param>
          <type>KoChannelInfo *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="27" column="14" bodyfile="Channel.cpp" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1aee8f50152fdf71d78eeb5d8ce82eced7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Channel::~Channel</definition>
        <argsstring>() override</argsstring>
        <name>~Channel</name>
        <qualifiedname>Channel::~Channel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="28" column="5" bodyfile="Channel.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1a21d6adf4b745535f7842e0f5b00f7213" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Channel::operator==</definition>
        <argsstring>(const Channel &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Channel::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_channel" kindref="compound">Channel</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="30" column="10" bodyfile="Channel.cpp" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1a8b87f344de6e2351c20a7936b0762ad6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Channel::operator!=</definition>
        <argsstring>(const Channel &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Channel::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_channel" kindref="compound">Channel</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="31" column="10" bodyfile="Channel.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1a9846cec445cb3fccdbf1b243613ddf69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Channel::visible</definition>
        <argsstring>() const</argsstring>
        <name>visible</name>
        <qualifiedname>Channel::visible</qualifiedname>
        <briefdescription>
<para>visible checks whether this channel is visible in the node </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the status of this channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="37" column="10" bodyfile="Channel.cpp" bodystart="58" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1a407b3ee90824a72b19569d6d967f9913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Channel::setVisible</definition>
        <argsstring>(bool value)</argsstring>
        <name>setVisible</name>
        <qualifiedname>Channel::setVisible</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>setvisible set the visibility of the channel to the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="42" column="10" bodyfile="Channel.cpp" bodystart="76" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1ad1e9654765bb4cae3eb63566e21b4a13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Channel::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>Channel::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the name of the channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="47" column="13" bodyfile="Channel.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1a3843cb5d6e418aaa19295584a58214ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Channel::position</definition>
        <argsstring>() const</argsstring>
        <name>position</name>
        <qualifiedname>Channel::position</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the position of the first byte of the channel in the pixel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="52" column="9" bodyfile="Channel.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1aea137c691e5a3689349f9cab4c4040d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Channel::channelSize</definition>
        <argsstring>() const</argsstring>
        <name>channelSize</name>
        <qualifiedname>Channel::channelSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of bytes this channel takes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="57" column="9" bodyfile="Channel.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1aab1f8fc244b6a81c44301e0b70a3483e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect Channel::bounds</definition>
        <argsstring>() const</argsstring>
        <name>bounds</name>
        <qualifiedname>Channel::bounds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the exact bounds of the channel. This can be smaller than the bounds of the <ref refid="class_node" kindref="compound">Node</ref> this channel is part of. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="62" column="11" bodyfile="Channel.cpp" bodystart="114" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1abb43c7a78a1366da856170d9da173050" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray Channel::pixelData</definition>
        <argsstring>(const QRect &amp;rect) const</argsstring>
        <name>pixelData</name>
        <qualifiedname>Channel::pixelData</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the values of the channel into the a byte array for each pixel in the rect from the <ref refid="class_node" kindref="compound">Node</ref> this channel is part of, and returns it.</para>
<para>Note that if <ref refid="class_krita" kindref="compound">Krita</ref> is built with OpenEXR and the <ref refid="class_node" kindref="compound">Node</ref> has the 16 bits floating point channel depth type, <ref refid="class_krita" kindref="compound">Krita</ref> returns 32 bits float for every channel; the libkis scripting API does not support half. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="70" column="16" bodyfile="Channel.cpp" bodystart="152" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_channel_1aa0ccf6e79bce5016715fce955b95eeb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Channel::setPixelData</definition>
        <argsstring>(QByteArray value, const QRect &amp;rect)</argsstring>
        <name>setPixelData</name>
        <qualifiedname>Channel::setPixelData</qualifiedname>
        <param>
          <type>QByteArray</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>setPixelData writes the given data to the relevant channel in the <ref refid="class_node" kindref="compound">Node</ref>. This is only possible for Nodes that have a paintDevice, so nothing will happen when trying to write to e.g. a group layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that if <ref refid="class_krita" kindref="compound">Krita</ref> is built with OpenEXR and the <ref refid="class_node" kindref="compound">Node</ref> has the 16 bits floating point channel depth type, <ref refid="class_krita" kindref="compound">Krita</ref> expects to be given a 4 byte, 32 bits float for every channel; the libkis scripting API does not support half.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>a byte array with exactly enough bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>the rectangle to write the bytes into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Channel.h" line="82" column="10" bodyfile="Channel.cpp" bodystart="196" bodyend="235"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="class_channel" kindref="compound">Channel</ref> represents a single channel in a <ref refid="class_node" kindref="compound">Node</ref>. <ref refid="class_krita" kindref="compound">Krita</ref> does not use channels to store local selections: these are strictly the color and alpha channels. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Channel</label>
        <link refid="class_channel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Channel</label>
        <link refid="class_channel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="Channel.h" line="22" column="1" bodyfile="Channel.h" bodystart="23" bodyend="89"/>
    <listofallmembers>
      <member refid="class_channel_1aab1f8fc244b6a81c44301e0b70a3483e" prot="public" virt="non-virtual"><scope>Channel</scope><name>bounds</name></member>
      <member refid="class_channel_1a54353e4d5c8d68707527f2b52704d2f7" prot="public" virt="non-virtual"><scope>Channel</scope><name>Channel</name></member>
      <member refid="class_channel_1aea137c691e5a3689349f9cab4c4040d3" prot="public" virt="non-virtual"><scope>Channel</scope><name>channelSize</name></member>
      <member refid="class_channel_1aefa84b18623f8df4071e19d33c02d02b" prot="private" virt="non-virtual"><scope>Channel</scope><name>d</name></member>
      <member refid="class_channel_1ad1e9654765bb4cae3eb63566e21b4a13" prot="public" virt="non-virtual"><scope>Channel</scope><name>name</name></member>
      <member refid="class_channel_1a8b87f344de6e2351c20a7936b0762ad6" prot="public" virt="non-virtual"><scope>Channel</scope><name>operator!=</name></member>
      <member refid="class_channel_1a21d6adf4b745535f7842e0f5b00f7213" prot="public" virt="non-virtual"><scope>Channel</scope><name>operator==</name></member>
      <member refid="class_channel_1abb43c7a78a1366da856170d9da173050" prot="public" virt="non-virtual"><scope>Channel</scope><name>pixelData</name></member>
      <member refid="class_channel_1a3843cb5d6e418aaa19295584a58214ed" prot="public" virt="non-virtual"><scope>Channel</scope><name>position</name></member>
      <member refid="class_channel_1aa0ccf6e79bce5016715fce955b95eeb3" prot="public" virt="non-virtual"><scope>Channel</scope><name>setPixelData</name></member>
      <member refid="class_channel_1a407b3ee90824a72b19569d6d967f9913" prot="public" virt="non-virtual"><scope>Channel</scope><name>setVisible</name></member>
      <member refid="class_channel_1a9846cec445cb3fccdbf1b243613ddf69" prot="public" virt="non-virtual"><scope>Channel</scope><name>visible</name></member>
      <member refid="class_channel_1aee8f50152fdf71d78eeb5d8ce82eced7" prot="public" virt="non-virtual"><scope>Channel</scope><name>~Channel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
