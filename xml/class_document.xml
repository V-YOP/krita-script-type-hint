<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="class_document" kind="class" language="C++" prot="public">
    <compoundname>Document</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="_document_8h" local="no">Document.h</includes>
    <innerclass refid="struct_document_1_1_private" prot="public">Document::Private</innerclass>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_document_1a875629509806a360029018f5a9cbaf6f" prot="private"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Krita</definition>
        <argsstring></argsstring>
        <name>Krita</name>
        <qualifiedname>Document::Krita</qualifiedname>
        <param>
          <type><ref refid="class_krita" kindref="compound">Krita</ref></type>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="930" column="18" bodyfile="Document.h" bodystart="930"
          bodyend="-1" />
      </memberdef>
      <memberdef kind="friend" id="class_document_1a553f958a25683445088050a69d3de8e9" prot="private"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Window</definition>
        <argsstring></argsstring>
        <name>Window</name>
        <qualifiedname>Document::Window</qualifiedname>
        <param>
          <type><ref refid="class_window" kindref="compound">Window</ref></type>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="931" column="18" bodyfile="Document.h" bodystart="931"
          bodyend="-1" />
      </memberdef>
      <memberdef kind="friend" id="class_document_1a34f7bc7cd29643e53d23b7d500d21739" prot="private"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Filter</definition>
        <argsstring></argsstring>
        <name>Filter</name>
        <qualifiedname>Document::Filter</qualifiedname>
        <param>
          <type><ref refid="class_filter" kindref="compound">Filter</ref></type>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="932" column="18" bodyfile="Document.h" bodystart="932"
          bodyend="-1" />
      </memberdef>
      <memberdef kind="friend" id="class_document_1a018ff8a950133459fda57a235706a80b" prot="private"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class View</definition>
        <argsstring></argsstring>
        <name>View</name>
        <qualifiedname>Document::View</qualifiedname>
        <param>
          <type><ref refid="class_view" kindref="compound">View</ref></type>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="933" column="18" bodyfile="Document.h" bodystart="933"
          bodyend="-1" />
      </memberdef>
      <memberdef kind="friend" id="class_document_1aa470056f72d93178e709c6dc936f98aa" prot="private"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class VectorLayer</definition>
        <argsstring></argsstring>
        <name>VectorLayer</name>
        <qualifiedname>Document::VectorLayer</qualifiedname>
        <param>
          <type><ref refid="class_vector_layer" kindref="compound">VectorLayer</ref></type>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="934" column="18" bodyfile="Document.h" bodystart="934"
          bodyend="-1" />
      </memberdef>
      <memberdef kind="friend" id="class_document_1a1e1ef8352d0a310bace7f7a3307d1378" prot="private"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Shape</definition>
        <argsstring></argsstring>
        <name>Shape</name>
        <qualifiedname>Document::Shape</qualifiedname>
        <param>
          <type><ref refid="class_shape" kindref="compound">Shape</ref></type>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="935" column="18" bodyfile="Document.h" bodystart="935"
          bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_document_1aa7203a921d720f09a0fa8ca9fc310139"
        prot="private" static="no" mutable="no">
        <type><ref refid="struct_document_1_1_private" kindref="compound">Private</ref> *const</type>
        <definition>Private* const Document::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>Document::d</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="941" column="19" bodyfile="Document.h" bodystart="941"
          bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_document_1a4db7132c10025c39a8d5669a8086f9c3"
        prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Document::Document</definition>
        <argsstring>(KisDocument *document, bool ownsDocument, QObject *parent=0)</argsstring>
        <name>Document</name>
        <qualifiedname>Document::Document</qualifiedname>
        <param>
          <type>KisDocument *</type>
          <declname>document</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ownsDocument</declname>
        </param>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>0</defval>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="39" column="14" bodyfile="Document.cpp" bodystart="74"
          bodyend="80" />
      </memberdef>
      <memberdef kind="function" id="class_document_1aacbeebde0dea142096b48b3ec3cf748d"
        prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Document::~Document</definition>
        <argsstring>() override</argsstring>
        <name>~Document</name>
        <qualifiedname>Document::~Document</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="40" column="5" bodyfile="Document.cpp" bodystart="82"
          bodyend="89" />
      </memberdef>
      <memberdef kind="function" id="class_document_1a65ba42f6e17ea29eddb833dcd9f14bfb"
        prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::operator==</definition>
        <argsstring>(const Document &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Document::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_document" kindref="compound">Document</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="42" column="10" bodyfile="Document.cpp" bodystart="91"
          bodyend="94" />
      </memberdef>
      <memberdef kind="function" id="class_document_1a3c6b7bd2d552ec9f38730953915e6f1b"
        prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::operator!=</definition>
        <argsstring>(const Document &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Document::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_document" kindref="compound">Document</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="43" column="10" bodyfile="Document.cpp" bodystart="96"
          bodyend="99" />
      </memberdef>
      <memberdef kind="function" id="class_document_1aa78509a280eac278a787b3699b323098"
        prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; qreal &gt;</type>
        <definition>QList&lt; qreal &gt; Document::horizontalGuides</definition>
        <argsstring>() const</argsstring>
        <name>horizontalGuides</name>
        <qualifiedname>Document::horizontalGuides</qualifiedname>
        <briefdescription>
          <para>horizontalGuides The horizontal guides. </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>a list of the horizontal positions of guides. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="50" column="11" bodyfile="Document.cpp" bodystart="828"
          bodyend="841" />
      </memberdef>
      <memberdef kind="function" id="class_document_1a8d51ceb6f54c696a3dffa1a42cf07532"
        prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; qreal &gt;</type>
        <definition>QList&lt; qreal &gt; Document::verticalGuides</definition>
        <argsstring>() const</argsstring>
        <name>verticalGuides</name>
        <qualifiedname>Document::verticalGuides</qualifiedname>
        <briefdescription>
          <para>verticalGuides The vertical guide lines. </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>a list of vertical guides. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="56" column="11" bodyfile="Document.cpp" bodystart="843"
          bodyend="856" />
      </memberdef>
      <memberdef kind="function" id="class_document_1a047471b983ac42cb1f2e9d63079a2d36"
        prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::guidesVisible</definition>
        <argsstring>() const</argsstring>
        <name>guidesVisible</name>
        <qualifiedname>Document::guidesVisible</qualifiedname>
        <briefdescription>
          <para>guidesVisible Returns guide visibility. </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>whether the guides are visible. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="63" column="10" bodyfile="Document.cpp" bodystart="858"
          bodyend="861" />
      </memberdef>
      <memberdef kind="function" id="class_document_1a90f86452915fabb8fbfb61b2e71bf749"
        prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::guidesLocked</definition>
        <argsstring>() const</argsstring>
        <name>guidesLocked</name>
        <qualifiedname>Document::guidesLocked</qualifiedname>
        <briefdescription>
          <para>guidesLocked Returns guide lockedness. </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>whether the guides are locked. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="69" column="10" bodyfile="Document.cpp" bodystart="863"
          bodyend="866" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-slot">
      <memberdef kind="slot" id="class_document_1a68ae4fc363bd83064e5e81d3cf2116ed" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_document" kindref="compound">Document</ref> *</type>
        <definition>Document * Document::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <qualifiedname>Document::clone</qualifiedname>
        <briefdescription>
          <para>clone create a shallow clone of this document. </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>a new <ref refid="class_document" kindref="compound">Document</ref> that should
          be identical to this one in every respect. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription>
          <para>We set ownsDocument to true, it will be reset automatically as soon as we create the
          first view for the document</para>
        </inbodydescription>
        <location file="Document.h" line="77" column="14" bodyfile="Document.cpp" bodystart="868"
          bodyend="878" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a81fc9b650731cdba56d98567aa8b19e5" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::batchmode</definition>
        <argsstring>() const</argsstring>
        <name>batchmode</name>
        <qualifiedname>Document::batchmode</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para>Batchmode means that no actions on the document should show dialogs or popups. <simplesect
              kind="return">
              <para>true if the document is in batchmode. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="83" column="10" bodyfile="Document.cpp" bodystart="101"
          bodyend="105" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ac0986f4a125d3e279ab597494f6c6cbe" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setBatchmode</definition>
        <argsstring>(bool value)</argsstring>
        <name>setBatchmode</name>
        <qualifiedname>Document::setBatchmode</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para>Set batchmode to <computeroutput>value</computeroutput>. If batchmode is true, then
          there should be no popups or dialogs shown to the user. </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="89" column="10" bodyfile="Document.cpp" bodystart="107"
          bodyend="111" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a47adaa12bbc954dc0a321a87414cd1ee" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_node" kindref="compound">Node</ref> *</type>
        <definition>Node * Document::activeNode</definition>
        <argsstring>() const</argsstring>
        <name>activeNode</name>
        <qualifiedname>Document::activeNode</qualifiedname>
        <briefdescription>
          <para>activeNode retrieve the node that is currently active in the currently active window </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the active node. If there is no active window, the first child node is returned. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="95" column="10" bodyfile="Document.cpp" bodystart="113"
          bodyend="128" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a29b65d5bbcc6a3598e7f1f3cc37ccc30" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setActiveNode</definition>
        <argsstring>(Node *value)</argsstring>
        <name>setActiveNode</name>
        <qualifiedname>Document::setActiveNode</qualifiedname>
        <param>
          <type><ref refid="class_node" kindref="compound">Node</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
          <para>setActiveNode make the given node active in the currently active view and window </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>value</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the node to make active. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="101" column="10" bodyfile="Document.cpp" bodystart="130"
          bodyend="145" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a155fc10246c22284bc86fe79bb123843" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_node" kindref="compound">Node</ref> * &gt;</type>
        <definition>QList&lt; Node * &gt; Document::topLevelNodes</definition>
        <argsstring>() const</argsstring>
        <name>topLevelNodes</name>
        <qualifiedname>Document::topLevelNodes</qualifiedname>
        <briefdescription>
          <para>toplevelNodes return a list with all top level nodes in the image graph </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="106" column="11" bodyfile="Document.cpp" bodystart="147"
          bodyend="152" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ad8ed446d59179f65695f9f458b6220cd" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_node" kindref="compound">Node</ref> *</type>
        <definition>Node * Document::nodeByName</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>nodeByName</name>
        <qualifiedname>Document::nodeByName</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
          <para>nodeByName searches the node tree for a node with the given name and returns it </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the name of the node </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>the first node with the given name or 0 if no node is found </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="113" column="10" bodyfile="Document.cpp" bodystart="155"
          bodyend="163" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a9f69f227907599d6a565a677e03c4c05" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_node" kindref="compound">Node</ref> *</type>
        <definition>Node * Document::nodeByUniqueID</definition>
        <argsstring>(const QUuid &amp;id) const</argsstring>
        <name>nodeByUniqueID</name>
        <qualifiedname>Document::nodeByUniqueID</qualifiedname>
        <param>
          <type>const QUuid &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
          <para>nodeByUniqueID searches the node tree for a node with the given name and returns it. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>uuid</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the unique id of the node </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>the node with the given unique id, or 0 if no node is found. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="121" column="10" bodyfile="Document.cpp" bodystart="165"
          bodyend="173" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ab31f8f4d264d21f1a0654758903293b1" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Document::colorDepth</definition>
        <argsstring>() const</argsstring>
        <name>colorDepth</name>
        <qualifiedname>Document::colorDepth</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para>colorDepth A string describing the color depth of the image: <itemizedlist>
              <listitem>
                <para>U8: unsigned 8 bits integer, the most common type </para>
              </listitem>
              <listitem>
                <para>U16: unsigned 16 bits integer </para>
              </listitem>
              <listitem>
                <para>F16: half, 16 bits floating point. Only available if <ref refid="class_krita"
                    kindref="compound">Krita</ref> was built with OpenEXR </para>
              </listitem>
              <listitem>
                <para>F32: 32 bits floating point </para>
              </listitem>
            </itemizedlist>
<simplesect
              kind="return">
              <para>the color depth. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="133" column="13" bodyfile="Document.cpp" bodystart="176"
          bodyend="180" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a3ad830f106f8fca68fbd1e4caae4a398" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Document::colorModel</definition>
        <argsstring>() const</argsstring>
        <name>colorModel</name>
        <qualifiedname>Document::colorModel</qualifiedname>
        <briefdescription>
          <para>colorModel retrieve the current color model of this document: </para>
        </briefdescription>
        <detaileddescription>
          <para><itemizedlist>
              <listitem>
                <para>A: Alpha mask </para>
              </listitem>
              <listitem>
                <para>RGBA: RGB with alpha channel (The actual order of channels is most often BGR!) </para>
              </listitem>
              <listitem>
                <para>XYZA: XYZ with alpha channel </para>
              </listitem>
              <listitem>
                <para>LABA: LAB with alpha channel </para>
              </listitem>
              <listitem>
                <para>CMYKA: CMYK with alpha channel </para>
              </listitem>
              <listitem>
                <para>GRAYA: Gray with alpha channel </para>
              </listitem>
              <listitem>
                <para>YCbCrA: YCbCr with alpha channel </para>
              </listitem>
            </itemizedlist>
<simplesect
              kind="return">
              <para>the internal color model string. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="148" column="13" bodyfile="Document.cpp" bodystart="182"
          bodyend="186" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a353d64799dd2b0d28a1096b8376d5f96" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Document::colorProfile</definition>
        <argsstring>() const</argsstring>
        <name>colorProfile</name>
        <qualifiedname>Document::colorProfile</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the name of the current color profile </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="153" column="13" bodyfile="Document.cpp" bodystart="188"
          bodyend="192" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a4f1403744fdf70dc6cbe687fbeba4893" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::setColorProfile</definition>
        <argsstring>(const QString &amp;colorProfile)</argsstring>
        <name>setColorProfile</name>
        <qualifiedname>Document::setColorProfile</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>colorProfile</declname>
        </param>
        <briefdescription>
          <para>setColorProfile set the color profile of the image to the given profile. The profile
          has to be registered with krita and be compatible with the current color model and depth;
          the image data is <emphasis>not</emphasis> converted. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>colorProfile</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para></para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>false if the colorProfile name does not correspond to to a registered profile or
          if assigning the profile failed. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="163" column="10" bodyfile="Document.cpp" bodystart="194"
          bodyend="203" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a7c21d5382994f86397d2a1bbcffd5360" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::setColorSpace</definition>
        <argsstring>(const QString &amp;colorModel, const QString &amp;colorDepth, const QString
          &amp;colorProfile)</argsstring>
        <name>setColorSpace</name>
        <qualifiedname>Document::setColorSpace</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>colorModel</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>colorDepth</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>colorProfile</declname>
        </param>
        <briefdescription>
          <para>setColorSpace convert the nodes and the image to the given colorspace. The
          conversion is done with Perceptual as intent, High Quality and No LCMS Optimizations as
          flags and no blackpoint compensation. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>colorModel</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>A string describing the color model of the image: <itemizedlist>
                      <listitem>
                        <para>A: Alpha mask </para>
                      </listitem>
                      <listitem>
                        <para>RGBA: RGB with alpha channel (The actual order of channels is most
          often BGR!) </para>
                      </listitem>
                      <listitem>
                        <para>XYZA: XYZ with alpha channel </para>
                      </listitem>
                      <listitem>
                        <para>LABA: LAB with alpha channel </para>
                      </listitem>
                      <listitem>
                        <para>CMYKA: CMYK with alpha channel </para>
                      </listitem>
                      <listitem>
                        <para>GRAYA: Gray with alpha channel </para>
                      </listitem>
                      <listitem>
                        <para>YCbCrA: YCbCr with alpha channel </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>colorDepth</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>A string describing the color depth of the image: <itemizedlist>
                      <listitem>
                        <para>U8: unsigned 8 bits integer, the most common type </para>
                      </listitem>
                      <listitem>
                        <para>U16: unsigned 16 bits integer </para>
                      </listitem>
                      <listitem>
                        <para>F16: half, 16 bits floating point. Only available if <ref
                            refid="class_krita" kindref="compound">Krita</ref> was built with
          OpenEXR </para>
                      </listitem>
                      <listitem>
                        <para>F32: 32 bits floating point </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>colorProfile</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>a valid color profile for this color model and color depth combination. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>false the combination of these arguments does not correspond to a colorspace. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="190" column="10" bodyfile="Document.cpp" bodystart="205"
          bodyend="218" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ac9b5eddf81e502b63dc7d2c6efc58b72" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QColor</type>
        <definition>QColor Document::backgroundColor</definition>
        <argsstring>()</argsstring>
        <name>backgroundColor</name>
        <qualifiedname>Document::backgroundColor</qualifiedname>
        <briefdescription>
          <para>backgroundColor returns the current background color of the document. The color will
          also include the opacity. </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>QColor </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="198" column="12" bodyfile="Document.cpp" bodystart="220"
          bodyend="227" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a297d80d5da3870a6519f25712e6dc8ea" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::setBackgroundColor</definition>
        <argsstring>(const QColor &amp;color)</argsstring>
        <name>setBackgroundColor</name>
        <qualifiedname>Document::setBackgroundColor</qualifiedname>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
          <para>setBackgroundColor sets the background color of the document. It will trigger a
          projection update. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>color</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>A QColor. The color will be converted from sRGB. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>bool </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="207" column="10" bodyfile="Document.cpp" bodystart="229"
          bodyend="241" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a9b6e49c77a3be2057cc8d051543319bf" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Document::documentInfo</definition>
        <argsstring>() const</argsstring>
        <name>documentInfo</name>
        <qualifiedname>Document::documentInfo</qualifiedname>
        <briefdescription>
          <para>documentInfo creates and XML document representing document and author information. </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>a string containing a valid XML document with the right information about the
          document and author. The DTD can be found here:</para>
            </simplesect>
<ulink
              url="https://phabricator.kde.org/source/krita/browse/master/krita/dtd/">
          https://phabricator.kde.org/source/krita/browse/master/krita/dtd/</ulink></para>
<para><programlisting><codeline><highlight class="normal">
          &lt;?xml<sp />version=</highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal"><sp />
          encoding=</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">
          ?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;!DOCTYPE<sp />
          document-info<sp />PUBLIC<sp /></highlight><highlight class="stringliteral">&apos;-//KDE//DTD<sp />
          document-info<sp />1.1//EN&apos;</highlight><highlight class="normal"><sp /></highlight><highlight class="stringliteral">
          &apos;http://www.calligra.org/DTD/document-info-1.1.dtd&apos;</highlight><highlight class="normal">
          &gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;document-info<sp />
          xmlns=</highlight><highlight class="stringliteral">
          &quot;http://www.calligra.org/DTD/document-info&quot;</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">
          &lt;about&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp />
          &lt;title&gt;My<sp /><ref refid="class_document" kindref="compound">Document</ref>&lt;/title&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;description&gt;&lt;/description&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;subject&gt;&lt;/subject&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;abstract&gt;&lt;![CDATA[]]&gt;&lt;/abstract&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;keyword&gt;&lt;/keyword&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;initial-creator&gt;Unknown&lt;/initial-creator&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;editing-cycles&gt;1&lt;/editing-cycles&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;editing-time&gt;35&lt;/editing-time&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;date&gt;2017-02-27T20:15:09&lt;/date&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;creation-date&gt;2017-02-27T20:14:33&lt;/creation-date&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;language&gt;&lt;/language&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp />
          &lt;/about&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp />
          &lt;author&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;full-<ref refid="class_document_1a2e566b3a96b81f300f9a409e84f9eb07" kindref="member">name</ref>
          &gt;Boudewijn<sp />Rempt&lt;/full-<ref
                    refid="class_document_1a2e566b3a96b81f300f9a409e84f9eb07" kindref="member">name</ref>
          &gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;initial&gt;&lt;/initial&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;author-title&gt;&lt;/author-title&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;email&gt;&lt;/email&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;telephone&gt;&lt;/telephone&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;telephone-work&gt;&lt;/telephone-work&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;fax&gt;&lt;/fax&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;country&gt;&lt;/country&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;postal-code&gt;&lt;/postal-code&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;city&gt;&lt;/city&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;street&gt;&lt;/street&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;position&gt;&lt;/position&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp /><sp />
          &lt;company&gt;&lt;/company&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp />
          &lt;/author&gt;</highlight></codeline>
<codeline><highlight class="normal">
          &lt;/document-info&gt;</highlight></codeline>
</programlisting>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="252" column="13" bodyfile="Document.cpp" bodystart="243"
          bodyend="249" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a1f67e6186727284b1886bcfe0eb16b27" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setDocumentInfo</definition>
        <argsstring>(const QString &amp;document)</argsstring>
        <name>setDocumentInfo</name>
        <qualifiedname>Document::setDocumentInfo</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>document</declname>
        </param>
        <briefdescription>
          <para>setDocumentInfo set the <ref refid="class_document" kindref="compound">Document</ref>
          information to the information contained in document </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>document</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>A string containing a valid XML document that conforms to the document-info
          DTD that can be found here:</para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<ulink
              url="https://phabricator.kde.org/source/krita/browse/master/krita/dtd/">
          https://phabricator.kde.org/source/krita/browse/master/krita/dtd/</ulink>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="261" column="10" bodyfile="Document.cpp" bodystart="251"
          bodyend="258" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a43b524bd6c269c67bb808e4ef40293a4" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Document::fileName</definition>
        <argsstring>() const</argsstring>
        <name>fileName</name>
        <qualifiedname>Document::fileName</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the full path to the document, if it has been set. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="266" column="13" bodyfile="Document.cpp" bodystart="261"
          bodyend="265" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ab9e04f2f12a31d7ec6d3bc5a1022d073" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setFileName</definition>
        <argsstring>(QString value)</argsstring>
        <name>setFileName</name>
        <qualifiedname>Document::setFileName</qualifiedname>
        <param>
          <type>QString</type>
          <declname>value</declname>
        </param>
        <briefdescription>
          <para>setFileName set the full path of the document to </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>value</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para></para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="271" column="10" bodyfile="Document.cpp" bodystart="267"
          bodyend="273" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a128e829bb24b055de57026223326b815" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <qualifiedname>Document::height</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the height of the image in pixels </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="276" column="9" bodyfile="Document.cpp" bodystart="275"
          bodyend="281" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1af108092810b0ed079a37b4fa8523977b" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setHeight</definition>
        <argsstring>(int value)</argsstring>
        <name>setHeight</name>
        <qualifiedname>Document::setHeight</qualifiedname>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
          <para>setHeight resize the document to </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>value</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>height. This is a canvas resize, not a scale. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="281" column="10" bodyfile="Document.cpp" bodystart="283"
          bodyend="291" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a2e566b3a96b81f300f9a409e84f9eb07" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Document::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>Document::name</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the name of the document. This is the title field in the <ref
                  refid="class_document_1a9b6e49c77a3be2057cc8d051543319bf" kindref="member">
          documentInfo</ref>
              </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="286" column="13" bodyfile="Document.cpp" bodystart="294"
          bodyend="298" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a6e5f546ad95c06e192f82e58b0af4927" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setName</definition>
        <argsstring>(QString value)</argsstring>
        <name>setName</name>
        <qualifiedname>Document::setName</qualifiedname>
        <param>
          <type>QString</type>
          <declname>value</declname>
        </param>
        <briefdescription>
          <para>setName sets the name of the document to <computeroutput>value</computeroutput>.
          This is the title field in the <ref
              refid="class_document_1a9b6e49c77a3be2057cc8d051543319bf" kindref="member">
          documentInfo</ref>
          </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="291" column="10" bodyfile="Document.cpp" bodystart="300"
          bodyend="304" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a08b6c8e6e160f9229f36540ad3d84807" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::resolution</definition>
        <argsstring>() const</argsstring>
        <name>resolution</name>
        <qualifiedname>Document::resolution</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the resolution in pixels per inch </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="296" column="9" bodyfile="Document.cpp" bodystart="307"
          bodyend="314" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ac95799577e5ab54714768455cc4d52a0" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setResolution</definition>
        <argsstring>(int value)</argsstring>
        <name>setResolution</name>
        <qualifiedname>Document::setResolution</qualifiedname>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
          <para>setResolution set the resolution of the image; this does not scale the image </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>value</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the resolution in pixels per inch </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="301" column="10" bodyfile="Document.cpp" bodystart="316"
          bodyend="327" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a35dd582b73479dbc79847326de510640" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_node" kindref="compound">Node</ref> *</type>
        <definition>Node * Document::rootNode</definition>
        <argsstring>() const</argsstring>
        <name>rootNode</name>
        <qualifiedname>Document::rootNode</qualifiedname>
        <briefdescription>
          <para>rootNode the root node is the invisible group layer that contains the entire node
          hierarchy. </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the root of the image </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="308" column="10" bodyfile="Document.cpp" bodystart="330"
          bodyend="337" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ac920de30e9d3d817e6c2fe61ca1e25ee" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_selection" kindref="compound">Selection</ref> *</type>
        <definition>Selection * Document::selection</definition>
        <argsstring>() const</argsstring>
        <name>selection</name>
        <qualifiedname>Document::selection</qualifiedname>
        <briefdescription>
          <para>selection Create a <ref refid="class_selection" kindref="compound">Selection</ref>
          object around the global selection, if there is one. </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the global selection or None if there is no global selection. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="314" column="15" bodyfile="Document.cpp" bodystart="339"
          bodyend="345" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a0fc9fffcb7107b3f5796d9ae084b8369" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setSelection</definition>
        <argsstring>(Selection *value)</argsstring>
        <name>setSelection</name>
        <qualifiedname>Document::setSelection</qualifiedname>
        <param>
          <type><ref refid="class_selection" kindref="compound">Selection</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
          <para>setSelection set or replace the global selection </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>value</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>a valid selection object. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="320" column="10" bodyfile="Document.cpp" bodystart="347"
          bodyend="357" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1aac01dc47c514bfa5eff0284011e1d17d" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <qualifiedname>Document::width</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the width of the image in pixels. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="325" column="9" bodyfile="Document.cpp" bodystart="360"
          bodyend="366" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1aab6dfa77a9ec6e87127d9bb36eefc0ce" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setWidth</definition>
        <argsstring>(int value)</argsstring>
        <name>setWidth</name>
        <qualifiedname>Document::setWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
          <para>setWidth resize the document to </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>value</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>width. This is a canvas resize, not a scale. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="330" column="10" bodyfile="Document.cpp" bodystart="368"
          bodyend="376" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ac8776ca65040584553dbfc3825363fe7" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::xOffset</definition>
        <argsstring>() const</argsstring>
        <name>xOffset</name>
        <qualifiedname>Document::xOffset</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the left edge of the canvas in pixels. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="335" column="9" bodyfile="Document.cpp" bodystart="379"
          bodyend="385" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a24bb072eba4939b7133fcfafc4ca4d62" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setXOffset</definition>
        <argsstring>(int x)</argsstring>
        <name>setXOffset</name>
        <qualifiedname>Document::setXOffset</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
          <para>setXOffset sets the left edge of the canvas to <computeroutput>x</computeroutput>. </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="340" column="10" bodyfile="Document.cpp" bodystart="387"
          bodyend="395" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a7cb75e4e283ca0d1fa0e174011634c53" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::yOffset</definition>
        <argsstring>() const</argsstring>
        <name>yOffset</name>
        <qualifiedname>Document::yOffset</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the top edge of the canvas in pixels. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="345" column="9" bodyfile="Document.cpp" bodystart="398"
          bodyend="404" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a29e0958a34e384130aaf4baea4053dd0" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setYOffset</definition>
        <argsstring>(int y)</argsstring>
        <name>setYOffset</name>
        <qualifiedname>Document::setYOffset</qualifiedname>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
          <para>setYOffset sets the top edge of the canvas to <computeroutput>y</computeroutput>. </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="350" column="10" bodyfile="Document.cpp" bodystart="406"
          bodyend="414" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ae25a768a5a198b6bf07945472e708c1d" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Document::xRes</definition>
        <argsstring>() const</argsstring>
        <name>xRes</name>
        <qualifiedname>Document::xRes</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>xRes the horizontal resolution of the image in pixels per inch </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="357" column="12" bodyfile="Document.cpp" bodystart="417"
          bodyend="422" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a71c0a9a745c4e1b17f7bbcb4d3eca1c4" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setXRes</definition>
        <argsstring>(double xRes) const</argsstring>
        <name>setXRes</name>
        <qualifiedname>Document::setXRes</qualifiedname>
        <param>
          <type>double</type>
          <declname>xRes</declname>
        </param>
        <briefdescription>
          <para>setXRes set the horizontal resolution of the image to xRes in pixels per inch </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="363" column="10" bodyfile="Document.cpp" bodystart="424"
          bodyend="435" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a63c7a48f667c7d063bd62b3b783c87a3" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Document::yRes</definition>
        <argsstring>() const</argsstring>
        <name>yRes</name>
        <qualifiedname>Document::yRes</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>yRes the vertical resolution of the image in pixels per inch </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="369" column="12" bodyfile="Document.cpp" bodystart="437"
          bodyend="442" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ab480128d3849a9a4f68bddf5fdfb3398" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setYRes</definition>
        <argsstring>(double yRes) const</argsstring>
        <name>setYRes</name>
        <qualifiedname>Document::setYRes</qualifiedname>
        <param>
          <type>double</type>
          <declname>yRes</declname>
        </param>
        <briefdescription>
          <para>setYRes set the vertical resolution of the image to yRes in pixels per inch </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="375" column="10" bodyfile="Document.cpp" bodystart="444"
          bodyend="455" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1aca1d1874a0ca18658f4bb130de735b20" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray Document::pixelData</definition>
        <argsstring>(int x, int y, int w, int h) const</argsstring>
        <name>pixelData</name>
        <qualifiedname>Document::pixelData</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
          <para>pixelData reads the given rectangle from the image projection and returns it as a
          byte array. The pixel data starts top-left, and is ordered row-first. </para>
        </briefdescription>
        <detaileddescription>
          <para>The byte array can be interpreted as follows: 8 bits images have one byte per
          channel, and as many bytes as there are channels. 16 bits integer images have two bytes
          per channel, representing an unsigned short. 16 bits float images have two bytes per
          channel, representing a half, or 16 bits float. 32 bits float images have four bytes per
          channel, representing a float.</para>
<para>You can read outside the image boundaries;
          those pixels will be transparent black.</para>
<para>The order of channels is:</para>
<para><itemizedlist>
              <listitem>
                <para>Integer RGBA: Blue, Green, Red, Alpha </para>
              </listitem>
              <listitem>
                <para>Float RGBA: Red, Green, Blue, Alpha </para>
              </listitem>
              <listitem>
                <para>LabA: L, a, b, Alpha </para>
              </listitem>
              <listitem>
                <para>CMYKA: Cyan, Magenta, Yellow, Key, Alpha </para>
              </listitem>
              <listitem>
                <para>XYZA: X, Y, Z, A </para>
              </listitem>
              <listitem>
                <para>YCbCrA: Y, Cb, Cr, Alpha </para>
              </listitem>
            </itemizedlist>
          </para>
<para>The
          byte array is a copy of the original image data. In Python, you can use bytes, bytearray
          and the struct module to interpret the data and construct, for instance, a Pillow Image
          object.</para>
<para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>x</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>x position from where to start reading </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>y</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>y position from where to start reading </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>w</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>row length to read </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>h</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>number of rows to read </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a QByteArray with the pixel data. The byte array may be empty. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="409" column="16" bodyfile="Document.cpp" bodystart="458"
          bodyend="470" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a1e6ae3aa647783af3298351725f52649" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <qualifiedname>Document::close</qualifiedname>
        <briefdescription>
          <para>close Close the document: remove it from <ref refid="class_krita" kindref="compound">
          Krita</ref>&apos;s internal list of documents and close all views. If the document is
          modified, you should save it first. There will be no prompt for saving. </para>
        </briefdescription>
        <detaileddescription>
          <para>After closing the document it becomes invalid.</para>
<para><simplesect kind="return">
              <para>true if the document is closed. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="420" column="10" bodyfile="Document.cpp" bodystart="472"
          bodyend="493" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ac522dcff08ffba00d287a965fffcd2a0" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::crop</definition>
        <argsstring>(int x, int y, int w, int h)</argsstring>
        <name>crop</name>
        <qualifiedname>Document::crop</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
          <para>crop the image to rectangle described by <computeroutput>x</computeroutput>, <computeroutput>
          y</computeroutput>, <computeroutput>w</computeroutput> and <computeroutput>h</computeroutput>
          </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>x</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>x coordinate of the top left corner </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>y</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>y coordinate of the top left corner </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>w</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>width </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>h</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>height </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="430" column="10" bodyfile="Document.cpp" bodystart="495"
          bodyend="503" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1abda324b9beee9384879af8b7e7807cfa" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::exportImage</definition>
        <argsstring>(const QString &amp;filename, const InfoObject &amp;exportConfiguration)</argsstring>
        <name>exportImage</name>
        <qualifiedname>Document::exportImage</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="class_info_object" kindref="compound">InfoObject</ref> &amp;</type>
          <declname>exportConfiguration</declname>
        </param>
        <briefdescription>
          <para>exportImage export the image, without changing its URL to the given path. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>filename</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the full path to which the image is to be saved </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>exportConfiguration</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>a configuration object appropriate to the file format. An <ref
                      refid="class_info_object" kindref="compound">InfoObject</ref> will used to
          that configuration.</para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          The supported formats have specific configurations that must be used when in batchmode.
          They are described below:</para>
<para><bold>png</bold> <itemizedlist>
              <listitem>
                <para>alpha: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>compression: int (1 to 9) </para>
              </listitem>
              <listitem>
                <para>forceSRGB: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>indexed: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>interlaced: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>saveSRGBProfile: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>transparencyFillcolor: rgb (Ex:[255,255,255]) </para>
              </listitem>
            </itemizedlist>
          </para>
<para><bold>
          jpeg</bold> <itemizedlist>
              <listitem>
                <para>baseline: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>exif: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>filters: bool ([&apos;ToolInfo&apos;, &apos;Anonymizer&apos;]) </para>
              </listitem>
              <listitem>
                <para>forceSRGB: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>iptc: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>is_sRGB: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>optimize: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>progressive: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>quality: int (0 to 100) </para>
              </listitem>
              <listitem>
                <para>saveProfile: bool (True or False) </para>
              </listitem>
              <listitem>
                <para>smoothing: int (0 to 100) </para>
              </listitem>
              <listitem>
                <para>subsampling: int (0 to 3) </para>
              </listitem>
              <listitem>
                <para>transparencyFillcolor: rgb (Ex:[255,255,255]) </para>
              </listitem>
              <listitem>
                <para>xmp: bool (True or False) </para>
              </listitem>
            </itemizedlist>
<simplesect
              kind="return">
              <para>true if the export succeeded, false if it failed. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="471" column="10" bodyfile="Document.cpp" bodystart="505"
          bodyend="513" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a24b2184ed0e6e2a22f12455b674ff0cb" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::flatten</definition>
        <argsstring>()</argsstring>
        <name>flatten</name>
        <qualifiedname>Document::flatten</qualifiedname>
        <briefdescription>
          <para>flatten all layers in the image </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="476" column="10" bodyfile="Document.cpp" bodystart="515"
          bodyend="521" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a35900d72f16669e76886e25c154cb329" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::resizeImage</definition>
        <argsstring>(int x, int y, int w, int h)</argsstring>
        <name>resizeImage</name>
        <qualifiedname>Document::resizeImage</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
          <para>resizeImage resizes the canvas to the given left edge, top edge, width and height.
          Note: This doesn&apos;t scale, use scale image for that. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>x</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the new left edge </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>y</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the new top edge </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>w</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the new width </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>h</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the new height </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="486" column="10" bodyfile="Document.cpp" bodystart="523"
          bodyend="536" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a551478c89e1f505bdd7d5902d18c3a96" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::scaleImage</definition>
        <argsstring>(int w, int h, int xres, int yres, QString strategy)</argsstring>
        <name>scaleImage</name>
        <qualifiedname>Document::scaleImage</qualifiedname>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xres</declname>
        </param>
        <param>
          <type>int</type>
          <declname>yres</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
          <para>scaleImage </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>w</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the new width </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>h</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the new height </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>xres</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the new xres </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>yres</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the new yres </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>strategy</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the scaling strategy. There&apos;s several ones amongst these that
          aren&apos;t available in the regular UI. The list of filters is extensible and can be
          retrieved with <ref refid="class_krita_1a88d6e9fd6319b13a3560819622ba7a81"
                      kindref="member">Krita::filter</ref> <itemizedlist>
                      <listitem>
                        <para>Hermite </para>
                      </listitem>
                      <listitem>
                        <para>Bicubic - Adds pixels using the color of surrounding pixels. Produces
          smoother tonal gradations than Bilinear. </para>
                      </listitem>
                      <listitem>
                        <para>Box - Replicate pixels in the image. Preserves all the original
          detail, but can produce jagged effects. </para>
                      </listitem>
                      <listitem>
                        <para>Bilinear - Adds pixels averaging the color values of surrounding
          pixels. Produces medium quality results when the image is scaled from half to two times
          the original size. </para>
                      </listitem>
                      <listitem>
                        <para>Bell </para>
                      </listitem>
                      <listitem>
                        <para>BSpline </para>
                      </listitem>
                      <listitem>
                        <para>Kanczos3 - Offers similar results than Bicubic, but maybe a little bit
          sharper. Can produce light and dark halos along strong edges. </para>
                      </listitem>
                      <listitem>
                        <para>Mitchell </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="507" column="9" bodyfile="Document.cpp" bodystart="538"
          bodyend="552" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a4dbe5faf96b18d226c37ff22d836add9" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::rotateImage</definition>
        <argsstring>(double radians)</argsstring>
        <name>rotateImage</name>
        <qualifiedname>Document::rotateImage</qualifiedname>
        <param>
          <type>double</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
          <para>rotateImage Rotate the image by the given radians. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>radians</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the amount you wish to rotate the image in radians </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="514" column="9" bodyfile="Document.cpp" bodystart="554"
          bodyend="561" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ad588ffd3f2f21f32275b48d43bf0a4ea" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::shearImage</definition>
        <argsstring>(double angleX, double angleY)</argsstring>
        <name>shearImage</name>
        <qualifiedname>Document::shearImage</qualifiedname>
        <param>
          <type>double</type>
          <declname>angleX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angleY</declname>
        </param>
        <briefdescription>
          <para>shearImage shear the whole image. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>angleX</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the X-angle in degrees to shear by </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>angleY</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the Y-angle in degrees to shear by </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="521" column="9" bodyfile="Document.cpp" bodystart="563"
          bodyend="570" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ab3688d7332c79fb5553a259edfe49ae9" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::save</definition>
        <argsstring>()</argsstring>
        <name>save</name>
        <qualifiedname>Document::save</qualifiedname>
        <briefdescription>
          <para>save the image to its currently set path. The modified flag of the document will be
          reset </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>true if saving succeeded, false otherwise. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="528" column="10" bodyfile="Document.cpp" bodystart="572"
          bodyend="581" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a3d5231b032ce674a8b42036db3c66206" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::saveAs</definition>
        <argsstring>(const QString &amp;filename)</argsstring>
        <name>saveAs</name>
        <qualifiedname>Document::saveAs</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
          <para>saveAs save the document under the <computeroutput>filename</computeroutput>. The
          document&apos;s filename will be reset to <computeroutput>filename</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>filename</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the new filename (full path) for the document </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>true if saving succeeded, false otherwise. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="536" column="10" bodyfile="Document.cpp" bodystart="583"
          bodyend="597" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1aa1631e73169ba8f683a58f3e98003493" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_node" kindref="compound">Node</ref> *</type>
        <definition>Node * Document::createNode</definition>
        <argsstring>(const QString &amp;name, const QString &amp;nodeType)</argsstring>
        <name>createNode</name>
        <qualifiedname>Document::createNode</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>nodeType</declname>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para><verbatim>   @brief createNode create a new node of the given type. The node is not added
   to the node hierarchy; you need to do that by finding the right parent node,
   getting its list of child nodes and adding the node in the right place, then
   calling Node::SetChildNodes

   @param name The name of the node

   @param nodeType The type of the node. Valid types are:
   &lt;ul&gt;
    &lt;li&gt;paintlayer
    &lt;li&gt;grouplayer
    &lt;li&gt;filelayer
    &lt;li&gt;filterlayer
    &lt;li&gt;filllayer
    &lt;li&gt;clonelayer
    &lt;li&gt;vectorlayer
    &lt;li&gt;transparencymask
    &lt;li&gt;filtermask
    &lt;li&gt;transformmask
    &lt;li&gt;selectionmask
   &lt;/ul&gt;

   When relevant, the new Node will have the colorspace of the image by default;
   that can be changed with Node::setColorSpace.

   The settings and selections for relevant layer and mask types can also be set
   after the Node has been created.
</verbatim> <programlisting><codeline><highlight class="normal">d<sp />=<sp />
          Application.createDocument(1000,<sp />1000,<sp /></highlight><highlight class="stringliteral">
          &quot;Test&quot;</highlight><highlight class="normal">,<sp /></highlight><highlight class="stringliteral">
          &quot;RGBA&quot;</highlight><highlight class="normal">,<sp /></highlight><highlight class="stringliteral">
          &quot;U8&quot;</highlight><highlight class="normal">,<sp /></highlight><highlight class="stringliteral">
          &quot;&quot;</highlight><highlight class="normal">,<sp />120.0)</highlight></codeline>
<codeline><highlight class="normal">
          root<sp />=<sp />d.rootNode();</highlight></codeline>
<codeline><highlight class="normal">
          print(root.childNodes())</highlight></codeline>
<codeline><highlight class="normal">l2<sp />
          =<sp />d.<ref refid="class_document_1aa1631e73169ba8f683a58f3e98003493" kindref="member">createNode</ref>
          (&quot;layer2&quot;,<sp />&quot;paintLayer&quot;)</highlight></codeline>
<codeline><highlight class="normal">
          print(l2)</highlight></codeline>
<codeline><highlight class="normal">
          root.addChildNode(l2,<sp />None)</highlight></codeline>
<codeline><highlight class="normal">
          print(root.childNodes())</highlight></codeline>
</programlisting></para>
<para><simplesect
              kind="return">
              <para>the new <ref refid="class_node" kindref="compound">Node</ref>. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="580" column="10" bodyfile="Document.cpp" bodystart="599"
          bodyend="645" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1aef5a97ba7a846833987d3134c4e84529" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_group_layer" kindref="compound">GroupLayer</ref> *</type>
        <definition>GroupLayer * Document::createGroupLayer</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>createGroupLayer</name>
        <qualifiedname>Document::createGroupLayer</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
          <para>createGroupLayer Returns a grouplayer object. Grouplayers are nodes that can have
          other layers as children and have the passthrough mode. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the name of the layer. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a <ref refid="class_group_layer" kindref="compound">GroupLayer</ref> object. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="588" column="16" bodyfile="Document.cpp" bodystart="647"
          bodyend="654" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1abaca7e44a32810bc075b5b61a07be315" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_file_layer" kindref="compound">FileLayer</ref> *</type>
        <definition>FileLayer * Document::createFileLayer</definition>
        <argsstring>(const QString &amp;name, const QString fileName, const QString scalingMethod,
          const QString scalingFilter=&quot;Bicubic&quot;)</argsstring>
        <name>createFileLayer</name>
        <qualifiedname>Document::createFileLayer</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QString</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const QString</type>
          <declname>scalingMethod</declname>
        </param>
        <param>
          <type>const QString</type>
          <declname>scalingFilter</declname>
          <defval>&quot;Bicubic&quot;</defval>
        </param>
        <briefdescription>
          <para>createFileLayer returns a layer that shows an external image. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>name of the file layer. </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>fileName</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the absolute filename of the file referenced. Symlinks will be resolved. </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>scalingMethod</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>how the dimensions of the file are interpreted can be either
          &quot;None&quot;, &quot;ImageToSize&quot; or &quot;ImageToPPI&quot; </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>scalingFilter</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>filter used to scale the file can be &quot;Bicubic&quot;,
          &quot;Hermite&quot;, &quot;NearestNeighbor&quot;, &quot;Bilinear&quot;, &quot;Bell&quot;,
          &quot;BSpline&quot;, &quot;Lanczos3&quot;, &quot;Mitchell&quot; </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a <ref refid="class_file_layer" kindref="compound">FileLayer</ref>
              </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="599" column="15" bodyfile="Document.cpp" bodystart="656"
          bodyend="663" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ad8e1f26cb819aea4486ecd7e597e0364" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_filter_layer" kindref="compound">FilterLayer</ref> *</type>
        <definition>FilterLayer * Document::createFilterLayer</definition>
        <argsstring>(const QString &amp;name, Filter &amp;filter, Selection &amp;selection)</argsstring>
        <name>createFilterLayer</name>
        <qualifiedname>Document::createFilterLayer</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_filter" kindref="compound">Filter</ref> &amp;</type>
          <declname>filter</declname>
        </param>
        <param>
          <type><ref refid="class_selection" kindref="compound">Selection</ref> &amp;</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
          <para>createFilterLayer creates a filter layer, which is a layer that represents a filter
          applied non-destructively. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>name of the filterLayer </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>filter</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the filter that this filter layer will us. </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>selection</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the selection. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a filter layer object. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="609" column="17" bodyfile="Document.cpp" bodystart="665"
          bodyend="672" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a4e8741dbfa8911d6bf0bd691eef863f1" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_fill_layer" kindref="compound">FillLayer</ref> *</type>
        <definition>FillLayer * Document::createFillLayer</definition>
        <argsstring>(const QString &amp;name, const QString generatorName, InfoObject
          &amp;configuration, Selection &amp;selection)</argsstring>
        <name>createFillLayer</name>
        <qualifiedname>Document::createFillLayer</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QString</type>
          <declname>generatorName</declname>
        </param>
        <param>
          <type><ref refid="class_info_object" kindref="compound">InfoObject</ref> &amp;</type>
          <declname>configuration</declname>
        </param>
        <param>
          <type><ref refid="class_selection" kindref="compound">Selection</ref> &amp;</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
          <para>createFillLayer creates a fill layer object, which is a layer </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para></para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>generatorName</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>- name of the generation filter. </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>configuration</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>- the configuration for the generation filter. </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>selection</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>- the selection. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a filllayer object.</para>
            </simplesect>
<programlisting><codeline><highlight class="normal">
          from<sp />krita<sp /></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp />
          *</highlight></codeline>
<codeline><highlight class="normal">d<sp />=<sp />
          Krita.instance().activeDocument()</highlight></codeline>
<codeline><highlight class="normal">
          i<sp />=<sp />InfoObject();</highlight></codeline>
<codeline><highlight class="normal">
          i.setProperty(</highlight><highlight class="stringliteral">&quot;pattern&quot;</highlight><highlight class="normal">
          ,<sp /></highlight><highlight class="stringliteral">&quot;Cross01.pat&quot;</highlight><highlight class="normal">
          )</highlight></codeline>
<codeline><highlight class="normal">s<sp />=<sp /><ref
                    refid="class_selection" kindref="compound">Selection</ref>();</highlight></codeline>
<codeline><highlight class="normal">
          s.select(0,<sp />0,<sp />d.width(),<sp />d.height(),<sp />255)</highlight></codeline>
<codeline><highlight class="normal">
          n<sp />=<sp />d.createFillLayer(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">
          ,<sp /></highlight><highlight class="stringliteral">&quot;pattern&quot;</highlight><highlight class="normal">
          ,<sp />i,<sp />s)</highlight></codeline>
<codeline><highlight class="normal">r<sp />=<sp />
          d.rootNode();</highlight></codeline>
<codeline><highlight class="normal">c<sp />=<sp />
          r.childNodes();</highlight></codeline>
<codeline><highlight class="normal">
          r.addChildNode(n,<sp />c[0])</highlight></codeline>
<codeline><highlight class="normal">
          d.refreshProjection()</highlight></codeline>
</programlisting>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="633" column="15" bodyfile="Document.cpp" bodystart="674"
          bodyend="691" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a75a68fd60041dc990cefd731777b59f4" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_clone_layer" kindref="compound">CloneLayer</ref> *</type>
        <definition>CloneLayer * Document::createCloneLayer</definition>
        <argsstring>(const QString &amp;name, const Node *source)</argsstring>
        <name>createCloneLayer</name>
        <qualifiedname>Document::createCloneLayer</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_node" kindref="compound">Node</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
          <para>createCloneLayer </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para></para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>source</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para></para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para></para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="641" column="16" bodyfile="Document.cpp" bodystart="693"
          bodyend="701" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a9fbf5ba51d8800b26fc2f4001f5236f5" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector_layer" kindref="compound">VectorLayer</ref> *</type>
        <definition>VectorLayer * Document::createVectorLayer</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>createVectorLayer</name>
        <qualifiedname>Document::createVectorLayer</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
          <para>createVectorLayer Creates a vector layer that can contain vector shapes. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the name of this layer. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a <ref refid="class_vector_layer" kindref="compound">VectorLayer</ref>. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="649" column="17" bodyfile="Document.cpp" bodystart="703"
          bodyend="710" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ae1d2e159374cae2f25bfa24531dbe814" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_filter_mask" kindref="compound">FilterMask</ref> *</type>
        <definition>FilterMask * Document::createFilterMask</definition>
        <argsstring>(const QString &amp;name, Filter &amp;filter, Selection &amp;selection)</argsstring>
        <name>createFilterMask</name>
        <qualifiedname>Document::createFilterMask</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_filter" kindref="compound">Filter</ref> &amp;</type>
          <declname>filter</declname>
        </param>
        <param>
          <type><ref refid="class_selection" kindref="compound">Selection</ref> &amp;</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
          <para>createFilterMask Creates a filter mask object that much like a filterlayer can apply
          a filter non-destructively. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the name of the layer. </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>filter</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the filter assigned. </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>selection</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the selection to be used by the filter mask </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a <ref refid="class_filter_mask" kindref="compound">FilterMask</ref>
              </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="659" column="16" bodyfile="Document.cpp" bodystart="734"
          bodyend="747" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a00be8454032e36f9084a35b425b258b1" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_filter_mask" kindref="compound">FilterMask</ref> *</type>
        <definition>FilterMask * Document::createFilterMask</definition>
        <argsstring>(const QString &amp;name, Filter &amp;filter, const Node *selection_source)</argsstring>
        <name>createFilterMask</name>
        <qualifiedname>Document::createFilterMask</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_filter" kindref="compound">Filter</ref> &amp;</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>const <ref refid="class_node" kindref="compound">Node</ref> *</type>
          <declname>selection_source</declname>
        </param>
        <briefdescription>
          <para>createFilterMask Creates a filter mask object that much like a filterlayer can apply
          a filter non-destructively. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the name of the layer. </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>filter</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the filter assigned. </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>selection_source</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>a node from which the selection should be initialized </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a <ref refid="class_filter_mask" kindref="compound">FilterMask</ref>
              </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="669" column="16" bodyfile="Document.cpp" bodystart="712"
          bodyend="732" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a12a3332c98429df0559bd5be569768ec" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_selection_mask" kindref="compound">SelectionMask</ref> *</type>
        <definition>SelectionMask * Document::createSelectionMask</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>createSelectionMask</name>
        <qualifiedname>Document::createSelectionMask</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
          <para>createSelectionMask Creates a selection mask, which can be used to store selections. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>- the name of the layer. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a <ref refid="class_selection_mask" kindref="compound">SelectionMask</ref>
              </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="677" column="19" bodyfile="Document.cpp" bodystart="749"
          bodyend="756" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1abbd8e5ca62dd2952623c2d5cbc6faf5f" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_transparency_mask" kindref="compound">TransparencyMask</ref> *</type>
        <definition>TransparencyMask * Document::createTransparencyMask</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>createTransparencyMask</name>
        <qualifiedname>Document::createTransparencyMask</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
          <para>createTransparencyMask Creates a transparency mask, which can be used to assign
          transparency to regions. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>- the name of the layer. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a <ref refid="class_transparency_mask" kindref="compound">TransparencyMask</ref>
              </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="685" column="22" bodyfile="Document.cpp" bodystart="758"
          bodyend="765" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a0a6f9de929e7d26b301d8b783b020391" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_transform_mask" kindref="compound">TransformMask</ref> *</type>
        <definition>TransformMask * Document::createTransformMask</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>createTransformMask</name>
        <qualifiedname>Document::createTransformMask</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
          <para>createTransformMask Creates a transform mask, which can be used to apply a
          transformation non-destructively. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>- the name of the layer mask. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a <ref refid="class_transform_mask" kindref="compound">TransformMask</ref>
              </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="693" column="19" bodyfile="Document.cpp" bodystart="767"
          bodyend="774" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a230bb260030a6dddee8166fd6712b86e" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_colorize_mask" kindref="compound">ColorizeMask</ref> *</type>
        <definition>ColorizeMask * Document::createColorizeMask</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>createColorizeMask</name>
        <qualifiedname>Document::createColorizeMask</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
          <para>createColorizeMask Creates a colorize mask, which can be used to color fill via
          keystrokes. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>name</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>- the name of the layer. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a <ref refid="class_transparency_mask" kindref="compound">TransparencyMask</ref>
              </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="701" column="18" bodyfile="Document.cpp" bodystart="776"
          bodyend="783" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a00a314a39fa727401b891add13e1e9d1" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QImage</type>
        <definition>QImage Document::projection</definition>
        <argsstring>(int x=0, int y=0, int w=0, int h=0) const</argsstring>
        <name>projection</name>
        <qualifiedname>Document::projection</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
          <para>projection creates a QImage from the rendered image or a cutout rectangle. </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="707" column="12" bodyfile="Document.cpp" bodystart="785"
          bodyend="789" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a22eb5d71a63b6bb49f37ed6dd46ffc03" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QImage</type>
        <definition>QImage Document::thumbnail</definition>
        <argsstring>(int w, int h) const</argsstring>
        <name>thumbnail</name>
        <qualifiedname>Document::thumbnail</qualifiedname>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
          <para>thumbnail create a thumbnail of the given dimensions. </para>
        </briefdescription>
        <detaileddescription>
          <para>If the requested size is too big a null QImage is created.</para>
<para><simplesect
              kind="return">
              <para>a QImage representing the layer contents. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="716" column="12" bodyfile="Document.cpp" bodystart="791"
          bodyend="795" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ad195c0ceb939a77fa61958ea7f750e87" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <qualifiedname>Document::lock</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para>[low-level] Lock the image without waiting for all the internal job queues are
          processed</para>
<para>WARNING: Don&apos;t use it unless you really know what you are
          doing! Use barrierLock() instead!</para>
<para>Waits for all the <bold>currently running</bold>
          internal jobs to complete and locks the image for writing. Please note that this function
          does <bold>not</bold> wait for all the internal queues to process, so there might be some
          non-finished actions pending. It means that you just postpone these actions until you <ref
              refid="class_document_1a453e1d004961ee80b3ce5e0cd0d81d67" kindref="member">unlock()</ref>
          the image back. Until then, then image might easily be frozen in some inconsistent state.</para>
<para>The
          only sane usage for this function is to lock the image for <bold>emergency</bold>
          processing, when some internal action or scheduler got hung up, and you just want to fetch
          some data from the image without races.</para>
<para>In all other cases, please use
          barrierLock() instead! </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="736" column="10" bodyfile="Document.cpp" bodystart="798"
          bodyend="802" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a453e1d004961ee80b3ce5e0cd0d81d67" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <qualifiedname>Document::unlock</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para>Unlocks the image and starts/resumes all the pending internal jobs. If the image has
          been locked for a non-readOnly access, then all the internal caches of the image (e.g.
          lod-planes) are reset and regeneration jobs are scheduled. </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="743" column="10" bodyfile="Document.cpp" bodystart="804"
          bodyend="808" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a843e1dd149b4c23f29cff528e81a28e0" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::waitForDone</definition>
        <argsstring>()</argsstring>
        <name>waitForDone</name>
        <qualifiedname>Document::waitForDone</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para>Wait for all the internal image jobs to complete and return without locking the
          image. This function is handy for tests or other synchronous actions, when one needs to
          wait for the result of his actions. </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="750" column="10" bodyfile="Document.cpp" bodystart="810"
          bodyend="814" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ab15cba7c760590f94f78bc0ebbe8dcc2" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::tryBarrierLock</definition>
        <argsstring>()</argsstring>
        <name>tryBarrierLock</name>
        <qualifiedname>Document::tryBarrierLock</qualifiedname>
        <briefdescription>
          <para>Tries to lock the image without waiting for the jobs to finish. </para>
        </briefdescription>
        <detaileddescription>
          <para>Same as barrierLock(), but doesn&apos;t block execution of the calling thread until
          all the background jobs are finished. Instead, in case of presence of unfinished jobs in
          the queue, it just returns false</para>
<para><simplesect kind="return">
              <para>whether the lock has been acquired </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="761" column="10" bodyfile="Document.cpp" bodystart="816"
          bodyend="820" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a90f8065fa35298a1634ca9a818aa2d4a" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::refreshProjection</definition>
        <argsstring>()</argsstring>
        <name>refreshProjection</name>
        <qualifiedname>Document::refreshProjection</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription>
          <para>Starts a synchronous recomposition of the projection: everything will wait until the
          image is fully recomputed. </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="767" column="10" bodyfile="Document.cpp" bodystart="822"
          bodyend="826" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a3417f75f20608385c1d056d538b6148e" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setHorizontalGuides</definition>
        <argsstring>(const QList&lt; qreal &gt; &amp;lines)</argsstring>
        <name>setHorizontalGuides</name>
        <qualifiedname>Document::setHorizontalGuides</qualifiedname>
        <param>
          <type>const QList&lt; qreal &gt; &amp;</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
          <para>setHorizontalGuides replace all existing horizontal guides with the entries in the
          list. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>lines</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>a list of floats containing the new guides. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="774" column="10" bodyfile="Document.cpp" bodystart="880"
          bodyend="894" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ab00bfba1ff1261a083abe5516b930b53" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setVerticalGuides</definition>
        <argsstring>(const QList&lt; qreal &gt; &amp;lines)</argsstring>
        <name>setVerticalGuides</name>
        <qualifiedname>Document::setVerticalGuides</qualifiedname>
        <param>
          <type>const QList&lt; qreal &gt; &amp;</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
          <para>setVerticalGuides replace all existing horizontal guides with the entries in the
          list. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>lines</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>a list of floats containing the new guides. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="780" column="10" bodyfile="Document.cpp" bodystart="896"
          bodyend="910" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a87fa583189e57a60b63349a41e2aedef" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setGuidesVisible</definition>
        <argsstring>(bool visible)</argsstring>
        <name>setGuidesVisible</name>
        <qualifiedname>Document::setGuidesVisible</qualifiedname>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
          <para>setGuidesVisible set guides visible on this document. </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>visible</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>whether or not the guides are visible. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="787" column="10" bodyfile="Document.cpp" bodystart="912"
          bodyend="918" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a0c3541ac01af75be0dbb782c40623853" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setGuidesLocked</definition>
        <argsstring>(bool locked)</argsstring>
        <name>setGuidesLocked</name>
        <qualifiedname>Document::setGuidesLocked</qualifiedname>
        <param>
          <type>bool</type>
          <declname>locked</declname>
        </param>
        <briefdescription>
          <para>setGuidesLocked set guides locked on this document </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>locked</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>whether or not to lock the guides on this document. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="794" column="10" bodyfile="Document.cpp" bodystart="920"
          bodyend="926" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a1eac9c1a6a388559e949130c25362b7b" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::modified</definition>
        <argsstring>() const</argsstring>
        <name>modified</name>
        <qualifiedname>Document::modified</qualifiedname>
        <briefdescription>
          <para>modified returns true if the document has unsaved modifications. </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="799" column="10" bodyfile="Document.cpp" bodystart="928"
          bodyend="932" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a89622dd480142497a747eddda752dfe2" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setModified</definition>
        <argsstring>(bool modified)</argsstring>
        <name>setModified</name>
        <qualifiedname>Document::setModified</qualifiedname>
        <param>
          <type>bool</type>
          <declname>modified</declname>
        </param>
        <briefdescription>
          <para>setModified sets the modified status of the document </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>modified</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>if true, the document is considered modified and closing it will ask for
          saving. </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="805" column="10" bodyfile="Document.cpp" bodystart="934"
          bodyend="938" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ad0151e34bca74b36414d89ff35e122ee" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect Document::bounds</definition>
        <argsstring>() const</argsstring>
        <name>bounds</name>
        <qualifiedname>Document::bounds</qualifiedname>
        <briefdescription>
          <para>bounds return the bounds of the image </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the bounds </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="811" column="11" bodyfile="Document.cpp" bodystart="940"
          bodyend="944" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a25d83acddc8c4aac7ef8d7e6bb03a0bf" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Document::importAnimation</definition>
        <argsstring>(const QList&lt; QString &gt; &amp;files, int firstFrame, int step)</argsstring>
        <name>importAnimation</name>
        <qualifiedname>Document::importAnimation</qualifiedname>
        <param>
          <type>const QList&lt; QString &gt; &amp;</type>
          <declname>files</declname>
        </param>
        <param>
          <type>int</type>
          <declname>firstFrame</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <briefdescription>
          <para>Import an image sequence of files from a directory. This will grab all images from
          the directory and import them with a potential offset (firstFrame) and step (images on 2s,
          3s, etc) </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>whether the animation import was successful </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="824" column="10" bodyfile="Document.cpp" bodystart="958"
          bodyend="971" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ac342615d709c91b8c2dc39666c67d1f9" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::framesPerSecond</definition>
        <argsstring>()</argsstring>
        <name>framesPerSecond</name>
        <qualifiedname>Document::framesPerSecond</qualifiedname>
        <briefdescription>
          <para>frames per second of document </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>the fps of the document </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="830" column="9" bodyfile="Document.cpp" bodystart="973"
          bodyend="979" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a0e170aea326eb9bfafc8e5ba9d1b51b4" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setFramesPerSecond</definition>
        <argsstring>(int fps)</argsstring>
        <name>setFramesPerSecond</name>
        <qualifiedname>Document::setFramesPerSecond</qualifiedname>
        <param>
          <type>int</type>
          <declname>fps</declname>
        </param>
        <briefdescription>
          <para>set frames per second of document </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="835" column="10" bodyfile="Document.cpp" bodystart="981"
          bodyend="987" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a1191798a181070b563e0ae8958d1503d" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setFullClipRangeStartTime</definition>
        <argsstring>(int startTime)</argsstring>
        <name>setFullClipRangeStartTime</name>
        <qualifiedname>Document::setFullClipRangeStartTime</qualifiedname>
        <param>
          <type>int</type>
          <declname>startTime</declname>
        </param>
        <briefdescription>
          <para>set start time of animation </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="840" column="10" bodyfile="Document.cpp" bodystart="989"
          bodyend="995" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a2808154f87dd5084359ace73cce4404d" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::fullClipRangeStartTime</definition>
        <argsstring>()</argsstring>
        <name>fullClipRangeStartTime</name>
        <qualifiedname>Document::fullClipRangeStartTime</qualifiedname>
        <briefdescription>
          <para>get the full clip range start time </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>full clip range start time </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="846" column="9" bodyfile="Document.cpp" bodystart="998"
          bodyend="1004" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a0e6b4140a9fa8234ca863d8cc38a1711" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setFullClipRangeEndTime</definition>
        <argsstring>(int endTime)</argsstring>
        <name>setFullClipRangeEndTime</name>
        <qualifiedname>Document::setFullClipRangeEndTime</qualifiedname>
        <param>
          <type>int</type>
          <declname>endTime</declname>
        </param>
        <briefdescription>
          <para>set full clip range end time </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="852" column="10" bodyfile="Document.cpp" bodystart="1007"
          bodyend="1013" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a220ff2207595616c59e8bfc9eccd478b" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::fullClipRangeEndTime</definition>
        <argsstring>()</argsstring>
        <name>fullClipRangeEndTime</name>
        <qualifiedname>Document::fullClipRangeEndTime</qualifiedname>
        <briefdescription>
          <para>get the full clip range end time </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>full clip range end time </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="858" column="9" bodyfile="Document.cpp" bodystart="1016"
          bodyend="1022" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a0b7eb880488fdcfe5b189d2b2bd86a1d" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::animationLength</definition>
        <argsstring>()</argsstring>
        <name>animationLength</name>
        <qualifiedname>Document::animationLength</qualifiedname>
        <briefdescription>
          <para>get total frame range for animation </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>total frame range for animation </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="864" column="9" bodyfile="Document.cpp" bodystart="1024"
          bodyend="1030" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a4f7469e9e152a6a4bddb3c47d416a518" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setPlayBackRange</definition>
        <argsstring>(int start, int stop)</argsstring>
        <name>setPlayBackRange</name>
        <qualifiedname>Document::setPlayBackRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
          <para>set temporary playback range of document </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="869" column="10" bodyfile="Document.cpp" bodystart="1032"
          bodyend="1039" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1abb82652117a8d4a63d9daca5ee8e7abe" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::playBackStartTime</definition>
        <argsstring>()</argsstring>
        <name>playBackStartTime</name>
        <qualifiedname>Document::playBackStartTime</qualifiedname>
        <briefdescription>
          <para>get start time of current playback </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>start time of current playback </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="875" column="9" bodyfile="Document.cpp" bodystart="1041"
          bodyend="1047" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a4e246c53d6102d3360eda947855abd19" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::playBackEndTime</definition>
        <argsstring>()</argsstring>
        <name>playBackEndTime</name>
        <qualifiedname>Document::playBackEndTime</qualifiedname>
        <briefdescription>
          <para>get end time of current playback </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>end time of current playback </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="881" column="9" bodyfile="Document.cpp" bodystart="1049"
          bodyend="1055" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a160e8e942f1ddc2c55906f7c793e2f0f" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Document::currentTime</definition>
        <argsstring>()</argsstring>
        <name>currentTime</name>
        <qualifiedname>Document::currentTime</qualifiedname>
        <briefdescription>
          <para>get current frame selected of animation </para>
        </briefdescription>
        <detaileddescription>
          <para><simplesect kind="return">
              <para>current frame selected of animation </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="887" column="9" bodyfile="Document.cpp" bodystart="1057"
          bodyend="1063" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ae68fd5ef0831ee06e94d7fca9f074dd8" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setCurrentTime</definition>
        <argsstring>(int time)</argsstring>
        <name>setCurrentTime</name>
        <qualifiedname>Document::setCurrentTime</qualifiedname>
        <param>
          <type>int</type>
          <declname>time</declname>
        </param>
        <briefdescription>
          <para>set current time of document&apos;s animation </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="892" column="10" bodyfile="Document.cpp" bodystart="1065"
          bodyend="1071" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a484016e481d9aafe8b15225c2ebd4281" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList Document::annotationTypes</definition>
        <argsstring>() const</argsstring>
        <name>annotationTypes</name>
        <qualifiedname>Document::annotationTypes</qualifiedname>
        <briefdescription>
          <para>annotationTypes returns the list of annotations present in the document. Each
          annotation type is unique. </para>
        </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="898" column="17" bodyfile="Document.cpp" bodystart="1073"
          bodyend="1098" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ad4b61dff3fe5fbbb84863794ba8d4ffc" prot="public"
        static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Document::annotationDescription</definition>
        <argsstring>(const QString &amp;type) const</argsstring>
        <name>annotationDescription</name>
        <qualifiedname>Document::annotationDescription</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
          <para>annotationDescription gets the pretty description for the current annotation </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>type</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the type of the annotation </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a string that can be presented to the user </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="905" column="13" bodyfile="Document.cpp" bodystart="1100"
          bodyend="1105" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ae32a697218e1dc97243518626e8ce9c3" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray Document::annotation</definition>
        <argsstring>(const QString &amp;type)</argsstring>
        <name>annotation</name>
        <qualifiedname>Document::annotation</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
          <para>annotation the actual data for the annotation for this type. It&apos;s a simple
          QByteArray, what&apos;s in it depends on the type of the annotation </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>type</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the type of the annotation </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
<simplesect
              kind="return">
              <para>a bytearray, possibly empty if this type of annotation doesn&apos;t exist </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="913" column="16" bodyfile="Document.cpp" bodystart="1107"
          bodyend="1117" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1ac14a7967cae6208045d29034b969dd02" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setAnnotation</definition>
        <argsstring>(const QString &amp;type, const QString &amp;description, const QByteArray
          &amp;annotation)</argsstring>
        <name>setAnnotation</name>
        <qualifiedname>Document::setAnnotation</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>annotation</declname>
        </param>
        <briefdescription>
          <para>setAnnotation Add the given annotation to the document </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>type</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the unique type of the annotation </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>description</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the user-visible description of the annotation </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>annotation</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the annotation itself </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="921" column="10" bodyfile="Document.cpp" bodystart="1119"
          bodyend="1125" />
      </memberdef>
      <memberdef kind="slot" id="class_document_1a7f00eb295da0131886522cef8f4f1a64" prot="public"
        static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::removeAnnotation</definition>
        <argsstring>(const QString &amp;type)</argsstring>
        <name>removeAnnotation</name>
        <qualifiedname>Document::removeAnnotation</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
          <para>removeAnnotation remove the specified annotation from the image </para>
        </briefdescription>
        <detaileddescription>
          <para><parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>type</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>the type defining the annotation </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="927" column="10" bodyfile="Document.cpp" bodystart="1127"
          bodyend="1131" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_document_1a0f9a625dc1a4b2bf0f9f1719e7e64c9d"
        prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointer&lt; KisDocument &gt;</type>
        <definition>QPointer&lt; KisDocument &gt; Document::document</definition>
        <argsstring>() const</argsstring>
        <name>document</name>
        <qualifiedname>Document::document</qualifiedname>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="936" column="14" bodyfile="Document.cpp" bodystart="946"
          bodyend="949" />
      </memberdef>
      <memberdef kind="function" id="class_document_1af62cf1923acb777e79274ca19a31600c"
        prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Document::setOwnsDocument</definition>
        <argsstring>(bool ownsDocument)</argsstring>
        <name>setOwnsDocument</name>
        <qualifiedname>Document::setOwnsDocument</qualifiedname>
        <param>
          <type>bool</type>
          <declname>ownsDocument</declname>
        </param>
        <briefdescription> </briefdescription>
        <detaileddescription> </detaileddescription>
        <inbodydescription> </inbodydescription>
        <location file="Document.h" line="937" column="10" bodyfile="Document.cpp" bodystart="951"
          bodyend="954" />
      </memberdef>
    </sectiondef>
    <briefdescription> </briefdescription>
    <detaileddescription>
      <para>The <ref refid="class_document" kindref="compound">Document</ref> class encapsulates a <ref
          refid="class_krita" kindref="compound">Krita</ref> Document/Image. A <ref
          refid="class_krita" kindref="compound">Krita</ref> document is an Image with a filename.
      Libkis does not differentiate between a document and an image, like <ref refid="class_krita"
          kindref="compound">Krita</ref> does internally. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Document</label>
        <link refid="class_document" />
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Document</label>
        <link refid="class_document" />
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="Document.h" line="33" column="1" bodyfile="Document.h" bodystart="34"
      bodyend="943" />
    <listofallmembers>
      <member refid="class_document_1a47adaa12bbc954dc0a321a87414cd1ee" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>activeNode</name>
      </member>
      <member refid="class_document_1a0b7eb880488fdcfe5b189d2b2bd86a1d" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>animationLength</name>
      </member>
      <member refid="class_document_1ae32a697218e1dc97243518626e8ce9c3" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>annotation</name>
      </member>
      <member refid="class_document_1ad4b61dff3fe5fbbb84863794ba8d4ffc" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>annotationDescription</name>
      </member>
      <member refid="class_document_1a484016e481d9aafe8b15225c2ebd4281" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>annotationTypes</name>
      </member>
      <member refid="class_document_1ac9b5eddf81e502b63dc7d2c6efc58b72" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>backgroundColor</name>
      </member>
      <member refid="class_document_1a81fc9b650731cdba56d98567aa8b19e5" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>batchmode</name>
      </member>
      <member refid="class_document_1ad0151e34bca74b36414d89ff35e122ee" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>bounds</name>
      </member>
      <member refid="class_document_1a68ae4fc363bd83064e5e81d3cf2116ed" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>clone</name>
      </member>
      <member refid="class_document_1a1e6ae3aa647783af3298351725f52649" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>close</name>
      </member>
      <member refid="class_document_1ab31f8f4d264d21f1a0654758903293b1" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>colorDepth</name>
      </member>
      <member refid="class_document_1a3ad830f106f8fca68fbd1e4caae4a398" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>colorModel</name>
      </member>
      <member refid="class_document_1a353d64799dd2b0d28a1096b8376d5f96" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>colorProfile</name>
      </member>
      <member refid="class_document_1a75a68fd60041dc990cefd731777b59f4" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createCloneLayer</name>
      </member>
      <member refid="class_document_1a230bb260030a6dddee8166fd6712b86e" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createColorizeMask</name>
      </member>
      <member refid="class_document_1abaca7e44a32810bc075b5b61a07be315" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createFileLayer</name>
      </member>
      <member refid="class_document_1a4e8741dbfa8911d6bf0bd691eef863f1" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createFillLayer</name>
      </member>
      <member refid="class_document_1ad8e1f26cb819aea4486ecd7e597e0364" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createFilterLayer</name>
      </member>
      <member refid="class_document_1ae1d2e159374cae2f25bfa24531dbe814" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createFilterMask</name>
      </member>
      <member refid="class_document_1a00be8454032e36f9084a35b425b258b1" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createFilterMask</name>
      </member>
      <member refid="class_document_1aef5a97ba7a846833987d3134c4e84529" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createGroupLayer</name>
      </member>
      <member refid="class_document_1aa1631e73169ba8f683a58f3e98003493" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createNode</name>
      </member>
      <member refid="class_document_1a12a3332c98429df0559bd5be569768ec" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createSelectionMask</name>
      </member>
      <member refid="class_document_1a0a6f9de929e7d26b301d8b783b020391" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createTransformMask</name>
      </member>
      <member refid="class_document_1abbd8e5ca62dd2952623c2d5cbc6faf5f" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createTransparencyMask</name>
      </member>
      <member refid="class_document_1a9fbf5ba51d8800b26fc2f4001f5236f5" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>createVectorLayer</name>
      </member>
      <member refid="class_document_1ac522dcff08ffba00d287a965fffcd2a0" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>crop</name>
      </member>
      <member refid="class_document_1a160e8e942f1ddc2c55906f7c793e2f0f" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>currentTime</name>
      </member>
      <member refid="class_document_1aa7203a921d720f09a0fa8ca9fc310139" prot="private"
        virt="non-virtual">
        <scope>Document</scope>
        <name>d</name>
      </member>
      <member refid="class_document_1a4db7132c10025c39a8d5669a8086f9c3" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>Document</name>
      </member>
      <member refid="class_document_1a0f9a625dc1a4b2bf0f9f1719e7e64c9d" prot="private"
        virt="non-virtual">
        <scope>Document</scope>
        <name>document</name>
      </member>
      <member refid="class_document_1a9b6e49c77a3be2057cc8d051543319bf" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>documentInfo</name>
      </member>
      <member refid="class_document_1abda324b9beee9384879af8b7e7807cfa" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>exportImage</name>
      </member>
      <member refid="class_document_1a43b524bd6c269c67bb808e4ef40293a4" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>fileName</name>
      </member>
      <member refid="class_document_1a34f7bc7cd29643e53d23b7d500d21739" prot="private"
        virt="non-virtual">
        <scope>Document</scope>
        <name>Filter</name>
      </member>
      <member refid="class_document_1a24b2184ed0e6e2a22f12455b674ff0cb" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>flatten</name>
      </member>
      <member refid="class_document_1ac342615d709c91b8c2dc39666c67d1f9" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>framesPerSecond</name>
      </member>
      <member refid="class_document_1a220ff2207595616c59e8bfc9eccd478b" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>fullClipRangeEndTime</name>
      </member>
      <member refid="class_document_1a2808154f87dd5084359ace73cce4404d" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>fullClipRangeStartTime</name>
      </member>
      <member refid="class_document_1a90f86452915fabb8fbfb61b2e71bf749" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>guidesLocked</name>
      </member>
      <member refid="class_document_1a047471b983ac42cb1f2e9d63079a2d36" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>guidesVisible</name>
      </member>
      <member refid="class_document_1a128e829bb24b055de57026223326b815" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>height</name>
      </member>
      <member refid="class_document_1aa78509a280eac278a787b3699b323098" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>horizontalGuides</name>
      </member>
      <member refid="class_document_1a25d83acddc8c4aac7ef8d7e6bb03a0bf" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>importAnimation</name>
      </member>
      <member refid="class_document_1a875629509806a360029018f5a9cbaf6f" prot="private"
        virt="non-virtual">
        <scope>Document</scope>
        <name>Krita</name>
      </member>
      <member refid="class_document_1ad195c0ceb939a77fa61958ea7f750e87" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>lock</name>
      </member>
      <member refid="class_document_1a1eac9c1a6a388559e949130c25362b7b" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>modified</name>
      </member>
      <member refid="class_document_1a2e566b3a96b81f300f9a409e84f9eb07" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>name</name>
      </member>
      <member refid="class_document_1ad8ed446d59179f65695f9f458b6220cd" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>nodeByName</name>
      </member>
      <member refid="class_document_1a9f69f227907599d6a565a677e03c4c05" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>nodeByUniqueID</name>
      </member>
      <member refid="class_document_1a3c6b7bd2d552ec9f38730953915e6f1b" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>operator!=</name>
      </member>
      <member refid="class_document_1a65ba42f6e17ea29eddb833dcd9f14bfb" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>operator==</name>
      </member>
      <member refid="class_document_1aca1d1874a0ca18658f4bb130de735b20" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>pixelData</name>
      </member>
      <member refid="class_document_1a4e246c53d6102d3360eda947855abd19" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>playBackEndTime</name>
      </member>
      <member refid="class_document_1abb82652117a8d4a63d9daca5ee8e7abe" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>playBackStartTime</name>
      </member>
      <member refid="class_document_1a00a314a39fa727401b891add13e1e9d1" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>projection</name>
      </member>
      <member refid="class_document_1a90f8065fa35298a1634ca9a818aa2d4a" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>refreshProjection</name>
      </member>
      <member refid="class_document_1a7f00eb295da0131886522cef8f4f1a64" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>removeAnnotation</name>
      </member>
      <member refid="class_document_1a35900d72f16669e76886e25c154cb329" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>resizeImage</name>
      </member>
      <member refid="class_document_1a08b6c8e6e160f9229f36540ad3d84807" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>resolution</name>
      </member>
      <member refid="class_document_1a35dd582b73479dbc79847326de510640" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>rootNode</name>
      </member>
      <member refid="class_document_1a4dbe5faf96b18d226c37ff22d836add9" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>rotateImage</name>
      </member>
      <member refid="class_document_1ab3688d7332c79fb5553a259edfe49ae9" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>save</name>
      </member>
      <member refid="class_document_1a3d5231b032ce674a8b42036db3c66206" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>saveAs</name>
      </member>
      <member refid="class_document_1a551478c89e1f505bdd7d5902d18c3a96" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>scaleImage</name>
      </member>
      <member refid="class_document_1ac920de30e9d3d817e6c2fe61ca1e25ee" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>selection</name>
      </member>
      <member refid="class_document_1a29b65d5bbcc6a3598e7f1f3cc37ccc30" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setActiveNode</name>
      </member>
      <member refid="class_document_1ac14a7967cae6208045d29034b969dd02" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setAnnotation</name>
      </member>
      <member refid="class_document_1a297d80d5da3870a6519f25712e6dc8ea" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setBackgroundColor</name>
      </member>
      <member refid="class_document_1ac0986f4a125d3e279ab597494f6c6cbe" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setBatchmode</name>
      </member>
      <member refid="class_document_1a4f1403744fdf70dc6cbe687fbeba4893" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setColorProfile</name>
      </member>
      <member refid="class_document_1a7c21d5382994f86397d2a1bbcffd5360" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setColorSpace</name>
      </member>
      <member refid="class_document_1ae68fd5ef0831ee06e94d7fca9f074dd8" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setCurrentTime</name>
      </member>
      <member refid="class_document_1a1f67e6186727284b1886bcfe0eb16b27" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setDocumentInfo</name>
      </member>
      <member refid="class_document_1ab9e04f2f12a31d7ec6d3bc5a1022d073" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setFileName</name>
      </member>
      <member refid="class_document_1a0e170aea326eb9bfafc8e5ba9d1b51b4" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setFramesPerSecond</name>
      </member>
      <member refid="class_document_1a0e6b4140a9fa8234ca863d8cc38a1711" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setFullClipRangeEndTime</name>
      </member>
      <member refid="class_document_1a1191798a181070b563e0ae8958d1503d" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setFullClipRangeStartTime</name>
      </member>
      <member refid="class_document_1a0c3541ac01af75be0dbb782c40623853" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setGuidesLocked</name>
      </member>
      <member refid="class_document_1a87fa583189e57a60b63349a41e2aedef" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setGuidesVisible</name>
      </member>
      <member refid="class_document_1af108092810b0ed079a37b4fa8523977b" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setHeight</name>
      </member>
      <member refid="class_document_1a3417f75f20608385c1d056d538b6148e" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setHorizontalGuides</name>
      </member>
      <member refid="class_document_1a89622dd480142497a747eddda752dfe2" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setModified</name>
      </member>
      <member refid="class_document_1a6e5f546ad95c06e192f82e58b0af4927" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setName</name>
      </member>
      <member refid="class_document_1af62cf1923acb777e79274ca19a31600c" prot="private"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setOwnsDocument</name>
      </member>
      <member refid="class_document_1a4f7469e9e152a6a4bddb3c47d416a518" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setPlayBackRange</name>
      </member>
      <member refid="class_document_1ac95799577e5ab54714768455cc4d52a0" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setResolution</name>
      </member>
      <member refid="class_document_1a0fc9fffcb7107b3f5796d9ae084b8369" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setSelection</name>
      </member>
      <member refid="class_document_1ab00bfba1ff1261a083abe5516b930b53" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setVerticalGuides</name>
      </member>
      <member refid="class_document_1aab6dfa77a9ec6e87127d9bb36eefc0ce" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setWidth</name>
      </member>
      <member refid="class_document_1a24bb072eba4939b7133fcfafc4ca4d62" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setXOffset</name>
      </member>
      <member refid="class_document_1a71c0a9a745c4e1b17f7bbcb4d3eca1c4" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setXRes</name>
      </member>
      <member refid="class_document_1a29e0958a34e384130aaf4baea4053dd0" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setYOffset</name>
      </member>
      <member refid="class_document_1ab480128d3849a9a4f68bddf5fdfb3398" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>setYRes</name>
      </member>
      <member refid="class_document_1a1e1ef8352d0a310bace7f7a3307d1378" prot="private"
        virt="non-virtual">
        <scope>Document</scope>
        <name>Shape</name>
      </member>
      <member refid="class_document_1ad588ffd3f2f21f32275b48d43bf0a4ea" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>shearImage</name>
      </member>
      <member refid="class_document_1a22eb5d71a63b6bb49f37ed6dd46ffc03" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>thumbnail</name>
      </member>
      <member refid="class_document_1a155fc10246c22284bc86fe79bb123843" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>topLevelNodes</name>
      </member>
      <member refid="class_document_1ab15cba7c760590f94f78bc0ebbe8dcc2" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>tryBarrierLock</name>
      </member>
      <member refid="class_document_1a453e1d004961ee80b3ce5e0cd0d81d67" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>unlock</name>
      </member>
      <member refid="class_document_1aa470056f72d93178e709c6dc936f98aa" prot="private"
        virt="non-virtual">
        <scope>Document</scope>
        <name>VectorLayer</name>
      </member>
      <member refid="class_document_1a8d51ceb6f54c696a3dffa1a42cf07532" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>verticalGuides</name>
      </member>
      <member refid="class_document_1a018ff8a950133459fda57a235706a80b" prot="private"
        virt="non-virtual">
        <scope>Document</scope>
        <name>View</name>
      </member>
      <member refid="class_document_1a843e1dd149b4c23f29cff528e81a28e0" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>waitForDone</name>
      </member>
      <member refid="class_document_1aac01dc47c514bfa5eff0284011e1d17d" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>width</name>
      </member>
      <member refid="class_document_1a553f958a25683445088050a69d3de8e9" prot="private"
        virt="non-virtual">
        <scope>Document</scope>
        <name>Window</name>
      </member>
      <member refid="class_document_1ac8776ca65040584553dbfc3825363fe7" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>xOffset</name>
      </member>
      <member refid="class_document_1ae25a768a5a198b6bf07945472e708c1d" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>xRes</name>
      </member>
      <member refid="class_document_1a7cb75e4e283ca0d1fa0e174011634c53" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>yOffset</name>
      </member>
      <member refid="class_document_1a63c7a48f667c7d063bd62b3b783c87a3" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>yRes</name>
      </member>
      <member refid="class_document_1aacbeebde0dea142096b48b3ec3cf748d" prot="public"
        virt="non-virtual">
        <scope>Document</scope>
        <name>~Document</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>